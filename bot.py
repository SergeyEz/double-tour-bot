# bot.py
import os
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse
import json

from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

# === –°—Å—ã–ª–∫–∏ ===
LINKS = {
    "site": "https://doubleride.ru",
    "inst": "https://www.instagram.com/double.community?igsh=dTY3bDU0ZWprdmg0",
    "vk": "https://vk.com/double.community",
    "tg_channel": "https://t.me/Doubleride",
    "corob": "https://vk.com/board88867",
    "booking": "https://vk.com/im?sel=-88867",
    "kirovsk_info": "https://vk.com/@-88867-pro-tur-v-hibiny",
    "kirovsk_schedule": "https://vk.com/@-88867-raspisanie-gornolyzhnyh-turov-na-sezon-2021-22-vmeste-s-doub",
    "sheregesh_info": "https://vk.com/@-88867-gornolyzhnyi-tur-v-sheregesh-daty-ceny-programma-faq",
    "sheregesh_schedule": "https://vk.com/double.community",
}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç", url=LINKS["site"])],
        [InlineKeyboardButton("üì∏ Instagram", url=LINKS["inst"])],
        [InlineKeyboardButton("üí¨ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=LINKS["vk"])],
        [InlineKeyboardButton("üì¢ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª", url=LINKS["tg_channel"])],
        [InlineKeyboardButton("üèÇ –ó–∞–ø–∏—Å—å –Ω–∞ –≤—ã–µ–∑–¥ –≤ –ö–æ—Ä–æ–±", url=LINKS["corob"])],
        [InlineKeyboardButton("üèî –¢—É—Ä—ã –≤ –≥–æ—Ä—ã", callback_data="mountain_tours")],
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç *DOUBLE*!\n\n"
        "–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å:"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        except Exception as e:
            if "Message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *¬´–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã¬ª*."
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def mountain_tours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìç –ö–∏—Ä–æ–≤—Å–∫", callback_data="kirovsk")],
        [InlineKeyboardButton("üìç –®–µ—Ä–µ–≥–µ—à", callback_data="sheregesh")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text("üåç –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=reply_markup)
    except Exception as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ mountain_tours: {e}")

async def kirovsk_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ç—É—Ä–µ", url=LINKS["kirovsk_info"])],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ/—Ü–µ–Ω—ã", url=LINKS["kirovsk_schedule"])],
        [InlineKeyboardButton("‚úÖ –ë—Ä–æ–Ω—å", url=LINKS["booking"])],
        [InlineKeyboardButton("‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã", url=LINKS["booking"])],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mountain_tours")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(
            "üìç *–¢—É—Ä –≤ –ö–∏—Ä–æ–≤—Å–∫*\n\n"
            "–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –•–∏–±–∏–Ω—ã, —Å–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ, —ç–∫—Å—Ç—Ä–∏–º –∏ –ø—Ä–∏—Ä–æ–¥–∞!",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ kirovsk_menu: {e}")

async def sheregesh_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ç—É—Ä–µ", url=LINKS["sheregesh_info"])],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ/—Ü–µ–Ω—ã", url=LINKS["sheregesh_schedule"])],
        [InlineKeyboardButton("‚úÖ –ë—Ä–æ–Ω—å", url=LINKS["booking"])],
        [InlineKeyboardButton("‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã", url=LINKS["booking"])],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mountain_tours")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(
            "üî• *–¢—É—Ä –≤ –®–µ—Ä–µ–≥–µ—à*\n\n"
            "–°–∞–º—ã–π –∫—Ä—É—Ç–æ–π —Å–Ω–æ—É–±–æ—Ä–¥–∏—á–µ—Å–∫–∏–π –∫—É—Ä–æ—Ä—Ç –°–∏–±–∏—Ä–∏!",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ sheregesh_menu: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "mountain_tours":
        await mountain_tours(update, context)
    elif data == "kirovsk":
        await kirovsk_menu(update, context)
    elif data == "sheregesh":
        await sheregesh_menu(update, context)
    elif data == "start":
        await start(update, context)

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===
def run():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Render
    port = int(os.getenv("PORT", 10000))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫
    application.run_webhook(
        listen="0.0.0.0",           # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        port=port,                   # –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        webhook_url=f"https://double-tour-bot.onrender.com/{TOKEN}"  # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å setWebhook
    )

if __name__ == "__main__":
    run()